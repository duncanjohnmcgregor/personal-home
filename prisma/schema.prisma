// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  playlists     Playlist[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  userId      String
  spotifyId   String?  @unique
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs PlaylistSong[]

  @@index([userId])
  @@index([spotifyId])
}

model Song {
  id              String   @id @default(cuid())
  title           String
  artist          String
  album           String?
  duration        Int?     // Duration in milliseconds
  spotifyId       String?
  soundcloudId    String?
  beatportId      String?
  previewUrl      String?
  image           String?
  isrc            String?  // International Standard Recording Code
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  playlists       PlaylistSong[]
  purchaseHistory PurchaseHistory[]

  @@unique([spotifyId])
  @@index([spotifyId])
  @@index([soundcloudId])
  @@index([beatportId])
  @@index([isrc])
}

model PlaylistSong {
  id         String   @id @default(cuid())
  playlistId String
  songId     String
  position   Int      // Position in playlist
  addedAt    DateTime @default(now())

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song     Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@index([playlistId])
  @@index([songId])
}

model PurchaseHistory {
  id         String   @id @default(cuid())
  userId     String
  songId     String
  platform   Platform
  price      Float?
  currency   String?
  purchaseId String?  // External purchase ID from platform
  status     PurchaseStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([songId])
  @@index([platform])
  @@index([status])
}

enum Platform {
  SPOTIFY
  BEATPORT
  SOUNDCLOUD
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}