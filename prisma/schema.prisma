// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // Neon connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Neon direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  playlists     Playlist[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  userId      String
  spotifyId   String?  @unique
  isPublic    Boolean  @default(false)
  position    Int      @default(0) // Position for user's playlist ordering
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs         PlaylistSong[]
  syncs         PlaylistSync[]
  importHistory ImportHistory[]

  @@index([userId])
  @@index([spotifyId])
  @@index([userId, position])
}

model Song {
  id              String   @id @default(cuid())
  title           String
  artist          String
  album           String?
  duration        Int?     // Duration in milliseconds
  bpm             Int?     // Beats per minute
  spotifyId       String?
  soundcloudId    String?
  beatportId      String?
  previewUrl      String?
  image           String?
  isrc            String?  // International Standard Recording Code
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  playlists       PlaylistSong[]
  purchaseHistory PurchaseHistory[]
  syncLogs        SyncLog[]

  @@unique([spotifyId])
  @@index([spotifyId])
  @@index([soundcloudId])
  @@index([beatportId])
  @@index([isrc])
  @@index([bpm])
}

model PlaylistSong {
  id         String   @id @default(cuid())
  playlistId String
  songId     String
  position   Int      // Position in playlist
  addedAt    DateTime @default(now())

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song     Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@index([playlistId])
  @@index([songId])
}

model PurchaseHistory {
  id         String   @id @default(cuid())
  userId     String
  songId     String
  platform   Platform
  price      Float?
  currency   String?
  purchaseId String?  // External purchase ID from platform
  status     PurchaseStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([songId])
  @@index([platform])
  @@index([status])
}

model PlaylistSync {
  id          String     @id @default(cuid())
  playlistId  String
  platform    Platform
  externalId  String?    // External playlist ID (e.g., Spotify playlist ID)
  status      SyncStatus @default(PENDING)
  lastSyncAt  DateTime?
  errorMessage String?
  conflictCount Int      @default(0)
  successCount Int       @default(0)
  totalCount   Int       @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  syncLogs SyncLog[]

  @@unique([playlistId, platform])
  @@index([playlistId])
  @@index([platform])
  @@index([status])
}

model SyncLog {
  id           String    @id @default(cuid())
  syncId       String
  songId       String?
  action       SyncAction
  status       SyncStatus
  errorMessage String?
  spotifyUri   String?   // Spotify URI if found
  createdAt    DateTime  @default(now())

  sync PlaylistSync @relation(fields: [syncId], references: [id], onDelete: Cascade)
  song Song?        @relation(fields: [songId], references: [id], onDelete: SetNull)

  @@index([syncId])
  @@index([songId])
  @@index([status])
}

enum Platform {
  SPOTIFY
  BEATPORT
  SOUNDCLOUD
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  PARTIAL
}

model ImportHistory {
  id              String       @id @default(cuid())
  userId          String
  playlistId      String?      // Reference to created playlist
  spotifyPlaylistId String     // Original Spotify playlist ID
  playlistName    String
  totalTracks     Int
  importedTracks  Int
  status          ImportStatus @default(PENDING)
  errorMessage    String?
  startedAt       DateTime     @default(now())
  completedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  playlist        Playlist?    @relation(fields: [playlistId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([spotifyPlaylistId])
  @@index([status])
  @@index([startedAt])
}

enum ImportStatus {
  PENDING
  IMPORTING
  COMPLETED
  FAILED
}

enum SyncAction {
  ADD_TRACK
  REMOVE_TRACK
  CREATE_PLAYLIST
  UPDATE_PLAYLIST
  SEARCH_TRACK
}