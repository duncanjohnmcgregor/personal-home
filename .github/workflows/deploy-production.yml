name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    env:
      POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
      POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
      SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
      SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
      SOUNDCLOUD_CLIENT_ID: ${{ secrets.SOUNDCLOUD_CLIENT_ID }}
      BEATPORT_CLIENT_ID: ${{ secrets.BEATPORT_CLIENT_ID }}
      BEATPORT_CLIENT_SECRET: ${{ secrets.BEATPORT_CLIENT_SECRET }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Determine Cache Key Strategy
      id: cache-strategy
      run: |
        echo "🔍 Determining cache key strategy..."
        echo "🎯 CD workflow will use latest CI build artifacts from cache"
        
        # Use current SHA for primary cache lookup
        CACHE_SHA="${{ github.sha }}"
        echo "📋 Looking for cached artifacts from commit: ${CACHE_SHA}"
        
        # Set outputs for use in cache steps
        echo "cache-sha=${CACHE_SHA}" >> $GITHUB_OUTPUT
        echo "cache-key=${{ runner.os }}-build-artifacts-${CACHE_SHA}" >> $GITHUB_OUTPUT
        echo "node-cache-key=${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT
        echo "build-cache-key=${{ runner.os }}-build-cache-${{ hashFiles('**/package-lock.json', '**/prisma/schema.prisma') }}" >> $GITHUB_OUTPUT
        
        echo "✅ Cache strategy determined:"
        echo "   Primary cache key: ${{ runner.os }}-build-artifacts-${CACHE_SHA}"
        echo "   Fallback pattern: ${{ runner.os }}-build-artifacts-"
        echo "🔍 Will use latest available CI artifacts if exact match not found"

    - name: Restore Cached Build Artifacts
      uses: actions/cache@v3
      id: cache-artifacts
      with:
        path: |
          .next
          node_modules/.prisma
          node_modules
          deployment-info.json
        key: ${{ steps.cache-strategy.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-build-artifacts-${{ github.event.before }}
          ${{ runner.os }}-build-artifacts-
          ${{ runner.os }}-build-cache-

    - name: Restore Additional Build Cache
      uses: actions/cache@v3
      id: cache-build-extras
      with:
        path: |
          .next/cache
          node_modules/.cache
        key: ${{ steps.cache-strategy.outputs.build-cache-key }}
        restore-keys: |
          ${{ runner.os }}-build-cache-

    - name: Verify Required Cached Artifacts
      run: |
        echo "🔍 Verifying required cached artifacts..."
        echo "Cache hit status: ${{ steps.cache-artifacts.outputs.cache-hit }}"
        echo "Expected cache key: ${{ steps.cache-strategy.outputs.cache-key }}"
        
        # Check if we got a cache hit OR if artifacts exist from restore-keys fallback
        CACHE_HIT="${{ steps.cache-artifacts.outputs.cache-hit }}"
        ARTIFACTS_AVAILABLE="false"
        
        # Check if critical artifacts exist (either from exact cache hit or restore-keys fallback)
        if [ -d ".next" ] && [ -f ".next/BUILD_ID" ] && [ -d "node_modules" ]; then
          ARTIFACTS_AVAILABLE="true"
          echo "✅ Build artifacts found (either from cache hit or restore-keys fallback)"
        fi
        
        if [ "$CACHE_HIT" = "true" ]; then
          echo "✅ Exact cache hit confirmed!"
          echo "🎯 Using cached artifacts from: ${{ steps.cache-strategy.outputs.cache-key }}"
        elif [ "$ARTIFACTS_AVAILABLE" = "true" ]; then
          echo "⚡ Using artifacts from cache restore-keys fallback"
          echo "ℹ️ This is normal when using enhanced cache strategy"
          echo "🎯 Artifacts restored from most recent compatible cache"
        else
          echo ""
          echo "❌ DEPLOYMENT FAILED: No build artifacts found"
          echo ""
          echo "🔍 Cache miss details:"
          echo "   Exact cache hit: ${{ steps.cache-artifacts.outputs.cache-hit }}"
          echo "   Artifacts available: $ARTIFACTS_AVAILABLE"
          echo "   Expected cache key: ${{ steps.cache-strategy.outputs.cache-key }}"
          echo "   Deployment info exists: $(test -f deployment-info.json && echo 'yes' || echo 'no')"
          echo ""
          echo "💡 Required steps to fix:"
          echo "   1. Ensure CI workflow completed successfully on this or recent commit"
          echo "   2. Check that CI workflow caches build artifacts properly"
          echo "   3. Verify cache key consistency between CI and CD workflows"
          echo "   4. Re-run CI workflow if needed to generate cached artifacts"
          echo ""
          echo "🚫 CD workflow will NOT build assets - deployment aborted"
          exit 1
        fi
        
        if [ ! -f "deployment-info.json" ]; then
          echo ""
          echo "❌ DEPLOYMENT FAILED: Deployment info missing from cache"
          echo "� Cache appears incomplete - CI workflow may not have completed properly"
          exit 1
        fi
        
        echo "✅ Cache hit confirmed! Using cached build artifacts."
        echo ""
        echo "📋 Cached Deployment Info:"
        cat deployment-info.json | jq '.' 2>/dev/null || cat deployment-info.json
        
        # Verify critical cached artifacts exist and are valid
        MISSING_ARTIFACTS=()
        
        if [ ! -d ".next" ]; then
          MISSING_ARTIFACTS+=(".next directory")
        fi
        
        if [ ! -f ".next/BUILD_ID" ]; then
          MISSING_ARTIFACTS+=("BUILD_ID file")
        fi
        
        if [ ! -d "node_modules/.prisma" ]; then
          MISSING_ARTIFACTS+=("Prisma client")
        fi
        
        if [ ! -d "node_modules" ]; then
          MISSING_ARTIFACTS+=("node_modules")
        fi
        
        if [ ${#MISSING_ARTIFACTS[@]} -gt 0 ]; then
          echo ""
          echo "❌ DEPLOYMENT FAILED: Critical artifacts missing from cache"
          echo ""
          echo "🔍 Missing artifacts:"
          for artifact in "${MISSING_ARTIFACTS[@]}"; do
            echo "   - $artifact"
          done
          echo ""
          echo "💡 This indicates the CI workflow cache is incomplete or corrupted"
          echo "🔧 Solution: Re-run the CI workflow to generate complete cached artifacts"
          echo "🚫 CD workflow will NOT build missing artifacts - deployment aborted"
          exit 1
        fi
        
        echo ""
        echo "✅ All cached artifacts verified successfully"
        echo "🚀 Ready for cache-only deployment!"
        echo ""
        echo "📊 Deployment Performance Summary:"
        echo "   ⚡ Using cached artifacts (ultra-fast deployment)"
        echo "   🚫 No build process executed (cache-only deployment)"
        echo "   📦 Cache key: ${{ steps.cache-strategy.outputs.cache-key }}"

    - name: Install Vercel CLI
      run: |
        echo "📦 Installing Vercel CLI..."
        npm install --global vercel@latest
        echo "✅ Vercel CLI ready"

    - name: Verify Environment Variables
      run: |
        echo "🔍 Verifying production environment variables..."
        
        # Check if environment variables are properly set
        if [ -n "$POSTGRES_PRISMA_URL" ]; then
          echo "✅ POSTGRES_PRISMA_URL is available"
        else
          echo "❌ POSTGRES_PRISMA_URL is not available in environment"
          exit 1
        fi
        
        if [ -n "$POSTGRES_URL_NON_POOLING" ]; then
          echo "✅ POSTGRES_URL_NON_POOLING is available"
        else
          echo "❌ POSTGRES_URL_NON_POOLING is not available in environment"
          exit 1
        fi
        
        if [ -n "$NEXTAUTH_SECRET" ]; then
          echo "✅ NEXTAUTH_SECRET is available"
        else
          echo "❌ NEXTAUTH_SECRET is not available in environment"
          exit 1
        fi
        
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "❌ VERCEL_TOKEN secret is not set!"
          echo ""
          echo "🔧 To fix this:"
          echo "1. Go to https://vercel.com/account/tokens"
          echo "2. Create a new token named 'GitHub Actions'"
          echo "3. Copy the token"
          echo "4. Go to GitHub repo → Settings → Secrets and variables → Actions"
          echo "5. Add secret named 'VERCEL_TOKEN' with the token value"
          echo ""
          echo "📖 See VERCEL_SECRETS_SETUP.md for detailed instructions"
          exit 1
        else
          echo "✅ VERCEL_TOKEN is configured"
        fi
        
        echo "✅ All required environment variables verified"

    - name: Database Connection and Schema Deployment
      run: |
        echo "🗄️ Setting up production database..."
        echo "===================================="
        
        # Test database connectivity first
        echo ""
        echo "🔍 Testing database connection..."
        
        # Create a lightweight connection test script
        cat > test-connection.js << 'EOF'
        const { PrismaClient } = require('@prisma/client')
        
        const prisma = new PrismaClient({
          log: ['error', 'warn'],
        })
        
        async function testConnection() {
          try {
            console.log('🔍 Testing database connection...')
            
            // Test basic connection
            await prisma.$connect()
            console.log('✅ Database connection established')
            
            // Test query execution
            await prisma.$queryRaw`SELECT 1 as connection_test`
            console.log('✅ Database query execution successful')
            
            console.log('✅ Connection test passed!')
            process.exit(0)
            
          } catch (error) {
            console.error('❌ Database connection failed:')
            console.error('Error details:', error.message)
            
            if (error.message.includes('ENOTFOUND')) {
              console.error('🔍 This appears to be a DNS/network issue')
            } else if (error.message.includes('authentication')) {
              console.error('🔍 This appears to be an authentication issue')
            } else if (error.message.includes('database') && error.message.includes('does not exist')) {
              console.error('🔍 Database does not exist')
            }
            
            process.exit(1)
          } finally {
            await prisma.$disconnect()
          }
        }
        
        testConnection()
        EOF
        
        # Run connection test
        if node test-connection.js; then
          echo "✅ Database connection test passed"
        else
          echo "❌ Database connection test failed"
          exit 1
        fi
        
        # Deploy migrations
        echo ""
        echo "🚀 Deploying database migrations..."
        if npx prisma migrate deploy; then
          echo "✅ Database migrations deployed successfully!"
        else
          echo "⚠️ Migration deploy failed, trying schema push..."
          if npx prisma db push --accept-data-loss; then
            echo "✅ Database schema pushed successfully!"
          else
            echo "❌ Both migration deploy and schema push failed"
            exit 1
          fi
        fi
        
        echo "✅ Database setup completed successfully!"

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy to Vercel
      run: |
        echo "🚀 Deploying to Vercel..."
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "✅ Deployment completed"
        echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
      id: deploy

    - name: Post-Deployment Health Check
      run: |
        echo "🏥 Running post-deployment health check..."
        echo "Waiting for deployment to stabilize..."
        sleep 10
        
        # Create health check script
        cat > post-deploy-health-check.js << 'EOF'
        const { PrismaClient } = require('@prisma/client')
        
        const prisma = new PrismaClient()
        
        async function healthCheck() {
          try {
            console.log('🔍 Testing database connectivity after deployment...')
            
            // Test connection
            await prisma.$connect()
            console.log('✅ Database connection: OK')
            
            // Test basic operations
            const userCount = await prisma.user.count()
            console.log(`✅ User table: accessible (${userCount} users)`)
            
            const playlistCount = await prisma.playlist.count()
            console.log(`✅ Playlist table: accessible (${playlistCount} playlists)`)
            
            // Test performance
            const start = Date.now()
            await prisma.$queryRaw`SELECT 1 as test`
            const duration = Date.now() - start
            console.log(`✅ Query performance: ${duration}ms`)
            
            if (duration > 3000) {
              console.log('⚠️ Warning: Query took longer than 3 seconds')
            }
            
            console.log('✅ Post-deployment health check passed!')
            
          } catch (error) {
            console.error('❌ Post-deployment health check failed:', error.message)
            process.exit(1)
          } finally {
            await prisma.$disconnect()
          }
        }
        
        healthCheck()
        EOF
        
        # Run health check
        if node post-deploy-health-check.js; then
          echo "✅ Post-deployment database health check passed!"
        else
          echo "❌ Post-deployment health check failed"
          echo "⚠️ Deployment may still be successful, but database connectivity issues detected"
        fi

    - name: Cleanup Temporary Files
      if: always()
      run: |
        echo "🧹 Cleaning up temporary files..."
        rm -f test-connection.js post-deploy-health-check.js
        echo "✅ Cleanup completed"

    - name: Deployment Summary
      if: always()
      run: |
        echo ""
        echo "📋 Deployment Summary"
        echo "===================="
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Production deployment successful!"
          if [ -n "${{ steps.deploy.outputs.deployment-url }}" ]; then
            echo "🌐 Deployment URL: ${{ steps.deploy.outputs.deployment-url }}"
          else
            echo "🌐 Check Vercel dashboard for live URL"
          fi
          echo ""
          echo "🎉 Deployment completed in record time thanks to cached artifacts!"
          echo ""
          echo "📊 Performance optimizations used:"
          echo "  ✅ Reused cached build artifacts from CI"
          echo "  ✅ Skipped redundant dependency installation"
          echo "  ✅ Skipped redundant build process"
          echo "  ✅ Streamlined database operations"
          echo "  ✅ Fast environment verification"
          echo ""
          echo "🔗 Next steps:"
          echo "  1. Test authentication with Spotify"
          echo "  2. Verify playlist functionality"
          echo "  3. Monitor application performance"
        else
          echo "❌ Production deployment failed"
          echo "Check the logs above for detailed error information"
          echo ""
          echo "💡 Troubleshooting tips:"
          echo "  1. Ensure CI workflow completed successfully"
          echo "  2. Verify all environment variables are set"
          echo "  3. Check database connectivity"
          echo "  4. Validate Vercel token permissions"
          exit 1
        fi
