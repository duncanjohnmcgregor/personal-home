name: Vercel Postgres Setup & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_db_reset:
        description: 'Force Database Reset'
        required: false
        type: boolean
        default: false

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  setup-database:
    name: Setup Vercel Postgres
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    outputs:
      database-created: ${{ steps.check-db.outputs.database-exists }}
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Vercel CLI
      run: npm i -g vercel@latest

    - name: Authenticate with Vercel
      run: |
        vercel link --yes --token ${{ secrets.VERCEL_TOKEN }}

    - name: Check if database exists
      id: check-db
      run: |
        # Check if database storage exists
        DB_EXISTS=$(vercel storage ls --token ${{ secrets.VERCEL_TOKEN }} | grep -c "postgres" || echo "0")
        
        if [ "$DB_EXISTS" -gt 0 ]; then
          echo "database-exists=true" >> $GITHUB_OUTPUT
          echo "✅ Database already exists"
        else
          echo "database-exists=false" >> $GITHUB_OUTPUT
          echo "📝 Database needs to be created"
        fi

    - name: Create Vercel Postgres Database
      if: steps.check-db.outputs.database-exists == 'false' || github.event.inputs.force_db_reset == 'true'
      run: |
        echo "🚀 Creating Vercel Postgres database..."
        
        # Create database with optimal settings
        vercel storage create postgres \
          --name "music-playlist-db-${{ github.event.inputs.environment || 'staging' }}" \
          --region "us-east-1" \
          --token ${{ secrets.VERCEL_TOKEN }}
        
        echo "✅ Database created successfully"
        
        # Wait for database to be ready
        sleep 30

    - name: Pull environment variables
      run: |
        echo "📥 Pulling environment variables from Vercel..."
        vercel env pull .env.production --token ${{ secrets.VERCEL_TOKEN }}
        
        # Verify required variables exist
        if ! grep -q "POSTGRES_URL" .env.production; then
          echo "❌ POSTGRES_URL not found in environment variables"
          exit 1
        fi
        
        echo "✅ Environment variables pulled successfully"

    - name: Setup additional environment variables
      run: |
        echo "🔧 Setting up additional required environment variables..."
        
        # Generate NEXTAUTH_SECRET if not exists
        if ! vercel env ls --token ${{ secrets.VERCEL_TOKEN }} | grep -q "NEXTAUTH_SECRET"; then
          NEXTAUTH_SECRET=$(openssl rand -base64 32)
          vercel env add NEXTAUTH_SECRET production --token ${{ secrets.VERCEL_TOKEN }} <<< "$NEXTAUTH_SECRET"
          vercel env add NEXTAUTH_SECRET preview --token ${{ secrets.VERCEL_TOKEN }} <<< "$NEXTAUTH_SECRET"
          vercel env add NEXTAUTH_SECRET development --token ${{ secrets.VERCEL_TOKEN }} <<< "$NEXTAUTH_SECRET"
          echo "✅ NEXTAUTH_SECRET generated and set"
        fi
        
        # Set NEXTAUTH_URL based on environment
        if [ "${{ github.event.inputs.environment || 'staging' }}" = "production" ]; then
          NEXTAUTH_URL="https://${{ secrets.PRODUCTION_DOMAIN || 'music-playlist-manager.vercel.app' }}"
        else
          NEXTAUTH_URL="https://${{ secrets.STAGING_DOMAIN || 'music-playlist-manager-staging.vercel.app' }}"
        fi
        
        vercel env add NEXTAUTH_URL production --token ${{ secrets.VERCEL_TOKEN }} --force <<< "$NEXTAUTH_URL"
        vercel env add NEXTAUTH_URL preview --token ${{ secrets.VERCEL_TOKEN }} --force <<< "$NEXTAUTH_URL"
        
        # Set Spotify credentials if provided
        if [ -n "${{ secrets.SPOTIFY_CLIENT_ID }}" ]; then
          vercel env add SPOTIFY_CLIENT_ID production --token ${{ secrets.VERCEL_TOKEN }} --force <<< "${{ secrets.SPOTIFY_CLIENT_ID }}"
          vercel env add SPOTIFY_CLIENT_ID preview --token ${{ secrets.VERCEL_TOKEN }} --force <<< "${{ secrets.SPOTIFY_CLIENT_ID }}"
        fi
        
        if [ -n "${{ secrets.SPOTIFY_CLIENT_SECRET }}" ]; then
          vercel env add SPOTIFY_CLIENT_SECRET production --token ${{ secrets.VERCEL_TOKEN }} --force <<< "${{ secrets.SPOTIFY_CLIENT_SECRET }}"
          vercel env add SPOTIFY_CLIENT_SECRET preview --token ${{ secrets.VERCEL_TOKEN }} --force <<< "${{ secrets.SPOTIFY_CLIENT_SECRET }}"
        fi

    - name: Generate Prisma Client
      run: |
        echo "🔄 Generating Prisma client..."
        npm run db:generate
        echo "✅ Prisma client generated"

    - name: Run database migrations
      run: |
        echo "🗃️ Running database migrations..."
        
        # Load environment variables
        set -a
        source .env.production
        set +a
        
        # Run migrations using non-pooling URL
        if [ -n "$POSTGRES_URL_NON_POOLING" ]; then
          export DATABASE_URL="$POSTGRES_URL_NON_POOLING"
        else
          export DATABASE_URL="$POSTGRES_URL"
        fi
        
        # Check if migrations exist, if not create initial migration
        if [ ! -d "prisma/migrations" ]; then
          echo "📝 Creating initial migration..."
          npx prisma migrate dev --name init --skip-generate
        else
          echo "🚀 Deploying existing migrations..."
          npx prisma migrate deploy
        fi
        
        echo "✅ Database migrations completed"

    - name: Test database connection
      run: |
        echo "🧪 Testing database connection..."
        
        # Load environment variables
        set -a
        source .env.production
        set +a
        
        # Run connection test
        npm run db:test
        
        echo "✅ Database connection test passed"

    - name: Build application
      run: |
        echo "🏗️ Building application..."
        npm run build
        echo "✅ Application built successfully"

    - name: Deploy to Vercel
      id: deploy
      run: |
        echo "🚀 Deploying to Vercel..."
        
        if [ "${{ github.event.inputs.environment || 'staging' }}" = "production" ]; then
          DEPLOYMENT_URL=$(vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes)
        else
          DEPLOYMENT_URL=$(vercel --token ${{ secrets.VERCEL_TOKEN }} --yes)
        fi
        
        echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "✅ Deployed to: $DEPLOYMENT_URL"

    - name: Run post-deployment tests
      run: |
        echo "🧪 Running post-deployment tests..."
        
        # Wait for deployment to be ready
        sleep 30
        
        # Test deployment health
        DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment-url }}"
        
        # Check if deployment is accessible
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL")
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "✅ Deployment is accessible"
        else
          echo "❌ Deployment returned HTTP $HTTP_STATUS"
          exit 1
        fi
        
        # Test API endpoints
        API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/api/health" || echo "404")
        
        if [ "$API_STATUS" = "200" ] || [ "$API_STATUS" = "404" ]; then
          echo "✅ API endpoints accessible"
        else
          echo "⚠️ API endpoints may have issues (HTTP $API_STATUS)"
        fi

    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Deployment completed successfully"
          echo "🌐 URL: ${{ steps.deploy.outputs.deployment-url }}"
          echo "📊 Environment: ${{ github.event.inputs.environment || 'staging' }}"
        else
          echo "❌ Deployment failed"
          exit 1
        fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: setup-database
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.setup-database.result == 'success'
      run: |
        echo "🎉 Deployment Successful!"
        echo "🌐 URL: ${{ needs.setup-database.outputs.deployment-url }}"
        echo "🗃️ Database: ${{ needs.setup-database.outputs.database-created == 'true' && 'Existing' || 'Created' }}"

    - name: Notify Failure
      if: needs.setup-database.result == 'failure'
      run: |
        echo "❌ Deployment Failed!"
        echo "Please check the logs for more details."
        exit 1