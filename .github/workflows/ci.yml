name: Continuous Integration

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate Database Schema
      env:
        # Provide dummy environment variables for schema validation
        # These are not real connections - just needed for Prisma validation
        POSTGRES_PRISMA_URL: "postgresql://dummy:dummy@localhost:5432/dummy?pgbouncer=true&connection_limit=1"
        POSTGRES_URL_NON_POOLING: "postgresql://dummy:dummy@localhost:5432/dummy"
        NEXTAUTH_SECRET: "dummy-secret-for-ci-validation"
      run: |
        echo "🔍 Validating Prisma schema..."
        echo "ℹ️ Using dummy environment variables for validation (no real database connection needed)"
        
        # Check schema syntax
        if npx prisma validate; then
          echo "✅ Prisma schema is valid"
        else
          echo "❌ Prisma schema validation failed"
          exit 1
        fi
        
        # Generate client to test schema compatibility
        if npx prisma generate; then
          echo "✅ Prisma client generated successfully"
        else
          echo "❌ Failed to generate Prisma client"
          exit 1
        fi
        
        # Validate migration files
        echo ""
        echo "📋 Checking migration files..."
        if [ -d "prisma/migrations" ]; then
          migration_count=$(find prisma/migrations -name "*.sql" | wc -l)
          echo "✅ Found $migration_count migration files"
          
          # Check for common migration issues
          if grep -r "DROP TABLE" prisma/migrations/ 2>/dev/null; then
            echo "⚠️ Warning: Found DROP TABLE statements in migrations"
            echo "   Make sure this is intentional and won't cause data loss"
          fi
          
          if grep -r "DROP COLUMN" prisma/migrations/ 2>/dev/null; then
            echo "⚠️ Warning: Found DROP COLUMN statements in migrations"
            echo "   Make sure this is intentional and won't cause data loss"
          fi
        else
          echo "ℹ️ No migration files found (using db push workflow)"
        fi
        
        echo "✅ Database schema validation completed"

    - name: Run type checking
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Test Database Schema Generation
      env:
        # Use same dummy variables for type testing
        POSTGRES_PRISMA_URL: "postgresql://dummy:dummy@localhost:5432/dummy?pgbouncer=true&connection_limit=1"
        POSTGRES_URL_NON_POOLING: "postgresql://dummy:dummy@localhost:5432/dummy"
        NEXTAUTH_SECRET: "dummy-secret-for-ci-validation"
      run: |
        echo "🧪 Testing database schema generation..."
        
        # Test that the generated client works with TypeScript
        cat > test-schema.ts << 'EOF'
        import { PrismaClient } from '@prisma/client'
        
        // Test that all main models are accessible
        const prisma = new PrismaClient()
        
        // Type check - this will fail if schema has issues
        async function testTypes() {
          // Test User model
          const user: Parameters<typeof prisma.user.create>[0] = {
            data: {
              email: 'test@example.com',
              name: 'Test User'
            }
          }
          
          // Test Playlist model
          const playlist: Parameters<typeof prisma.playlist.create>[0] = {
            data: {
              name: 'Test Playlist',
              userId: 'test-user-id'
            }
          }
          
          // Test Song model
          const song: Parameters<typeof prisma.song.create>[0] = {
            data: {
              title: 'Test Song',
              artist: 'Test Artist'
            }
          }
          
          // Test newer models from latest migration
          const playlistSync: Parameters<typeof prisma.playlistSync.create>[0] = {
            data: {
              playlistId: 'test-playlist-id',
              platform: 'SPOTIFY'
            }
          }
          
          const importHistory: Parameters<typeof prisma.importHistory.create>[0] = {
            data: {
              userId: 'test-user-id',
              spotifyPlaylistId: 'test-spotify-id',
              playlistName: 'Test Import',
              totalTracks: 10,
              importedTracks: 8
            }
          }
          
          console.log('✅ All model types are valid')
        }
        
        // Don't actually run the function, just test compilation
        export { testTypes }
        EOF
        
        # Create a temporary tsconfig for schema testing with ES2015+ target
        cat > tsconfig.schema-test.json << 'EOF'
        {
          "compilerOptions": {
            "target": "es2015",
            "lib": ["dom", "dom.iterable", "es6"],
            "allowJs": true,
            "skipLibCheck": true,
            "strict": true,
            "noEmit": true,
            "esModuleInterop": true,
            "module": "esnext",
            "moduleResolution": "bundler",
            "resolveJsonModule": true,
            "isolatedModules": true,
            "jsx": "preserve",
            "baseUrl": ".",
            "paths": {
              "@/*": ["./src/*"],
              "@/components/*": ["./src/components/*"],
              "@/lib/*": ["./src/lib/*"],
              "@/hooks/*": ["./src/hooks/*"],
              "@/store/*": ["./src/store/*"],
              "@/types/*": ["./src/types/*"]
            }
          },
          "include": ["test-schema.ts"],
          "exclude": ["node_modules"]
        }
        EOF
        
        # Test TypeScript compilation with Prisma-compatible configuration
        if npx tsc --project tsconfig.schema-test.json; then
          echo "✅ Database schema types are valid"
          rm test-schema.ts tsconfig.schema-test.json
        else
          echo "❌ Database schema type checking failed"
          rm test-schema.ts tsconfig.schema-test.json
          exit 1
        fi

    - name: Build application
      run: npm run build

    - name: Test Build Artifacts
      run: |
        echo "🔍 Testing build artifacts..."
        
        # Check that essential files were created
        if [ ! -d ".next" ]; then
          echo "❌ .next directory not found"
          exit 1
        fi
        
        if [ ! -f ".next/BUILD_ID" ]; then
          echo "❌ BUILD_ID file not found"
          exit 1
        fi
        
        # Check that Prisma client is included in build
        if [ ! -d "node_modules/.prisma" ]; then
          echo "❌ Prisma client not found in node_modules"
          exit 1
        fi
        
        echo "✅ Build artifacts validated"

    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: |
          .next/cache
          node_modules/.cache
          node_modules/.prisma
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json', '**/prisma/schema.prisma') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: CI Summary
      if: always()
      run: |
        echo ""
        echo "📋 CI Summary"
        echo "=============="
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ All checks passed:"
          echo "  ✅ Database schema validation (syntax and structure)"
          echo "  ✅ TypeScript type checking (including latest schema changes)"
          echo "  ✅ ESLint code quality"
          echo "  ✅ Application build"
          echo "  ✅ Build artifacts validation"
          echo ""
          echo "🚀 Ready for deployment!"
          echo "ℹ️ Note: Database schema validated with dummy connections (real DB testing happens in production deployment)"
        else
          echo "❌ CI checks failed"
          echo "Please review the logs above for detailed error information"
        fi